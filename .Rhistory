}
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
pwm_llgt <- function(deficit, n_param = 2){
number_years <- ncol(deficit)
param <- 1:number_years
param <- 1- (param-0.35)/number_years
param <- matrix(rep(param,nrow(deficit)), ncol = number_years,
nrow = nrow(deficit), byrow = T)
w0 <- rowSums(deficit, na.rm = T)/number_years
w1 <- rowSums(deficit*param,na.rm = T)/number_years
w2 <- rowSums(deficit*param^2, na.rm = T)/number_years
b <- (2*w1 - w0)/(6*w1 - w0 - 6*w2)
a <- (w0 - 2*w1)*b/(gamma(1 + 1/b) * gamma(1 - 1/b))
c <- w0 - (w0 - 2*w1)*b
if (n_param == 2){
parameters <- data.frame(a = a,b = b)
} else if (n_param == 3){
parameters <- data.frame(a = a,b = b, c = c)
} else {
parameters <- NA
}
return(parameters)
}
pwm_llgt <- function(deficit, n_param = 3){
number_years <- ncol(deficit)
param <- 1:number_years
param <- 1- (param-0.35)/number_years
param <- matrix(rep(param,nrow(deficit)), ncol = number_years,
nrow = nrow(deficit), byrow = T)
w0 <- rowSums(deficit, na.rm = T)/number_years
w1 <- rowSums(deficit*param,na.rm = T)/number_years
w2 <- rowSums(deficit*param^2, na.rm = T)/number_years
b <- (2*w1 - w0)/(6*w1 - w0 - 6*w2)
a <- (w0 - 2*w1)*b/(gamma(1 + 1/b) * gamma(1 - 1/b))
c <- w0 - (w0 - 2*w1)*b
if (n_param == 2){
parameters <- data.frame(a = a,b = b)
} else if (n_param == 3){
parameters <- data.frame(a = a,b = b, c = c)
} else {
parameters <- NA
}
return(parameters)
}
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
series_sesr_output$is.fd <- 0
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library('usethis')
use_data_raw()
use_data_raw()
use_data()
flx_de_tha_day <- read.csv('FLX_DE-Tha_DD.csv')
flx_de_tha_day
flx_de_tha_day <- read.csv('FLX_DE-Tha_DD.csv')
use_data(
Sys.setenv(lang = 'en ')
flx_de_tha_day <- read.csv('FLX_DE-Tha_DD.csv')
usethis::use_data(flx_de_tha_day, overwrite = TRUE)
flx_de_tha_day <- read.csv('FLX_DE-Tha_DD.csv')
## code to prepare `DATASET` dataset goes here
setwd('C:/Users/pedro/OneDrive/@DOUTORADO/@@TU-Berlin/@Artigos/CAP 4/package/fdClassify/data-raw')
flx_de_tha_day <- read.csv('FLX_DE-Tha_DD.csv')
usethis::use_data(flx_de_tha_day, overwrite = TRUE)
pryr::mem_used()
install.packages(pryr)
install.packages('pryr')
library(pryr)
pryr::mem_used()
usethis::use_data(flx_de_tha_day, overwrite = TRUE, compress = 'XZ')
usethis::use_data(flx_de_tha_day, overwrite = TRUE, compress = 'xz')
pryr::mem_used()
usethis::use_data(flx_de_tha_hour, overwrite = TRUE)
flx_de_tha_day <- read.csv('FLX_DE-Tha_DD.csv')
flx_de_tha_hour <- read.csv('FLX_DE-Tha_HH.csv')
usethis::use_data(flx_de_tha_day, overwrite = TRUE)
usethis::use_data(flx_de_tha_hour, overwrite = TRUE)
#'
#'
#'
#'
?flx_de_tha_hour
library(fdClassify)
fdClassify::flx_de_tha_day
library(fdClassify)
library(fdClassify)
flx_de_tha_day
?flx_de_tha_day
??flx_de_tha_day
?data1
??data1
?flx_de_tha_day
library(fdClassify)
?flx_de_tha_day
??flx_de_tha_day
flx_de_tha_day
flx_de_tha_hour
library(fdClassify)
??flx_de_tha_day
?flx_de_tha_day
?flx_de_tha_day
library(fdClassify)
flx_de_tha_day()
flx_de_tha_day()
library(fdClassify)
library(fdClassify)
?flx_de_tha_day
library(fdClassify)
flx_de_tha_day
flx_de_tha_day()
?flx_de_tha_day
?flx_de_tha_day
library(fdClassify)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
if(!require('pacman'))install.packages('pacman')
pacman::p_load('ncdf4','ncdf4.helpers','PCICt','ggplot2','tidyr','dplyr','readr'
,'raster','tibbletime','lubridate','RColorBrewer','stringr','knitr'
,'tinytex','data.table','runner', 'reshape2', 'tidyquant', 'SPEI'
, 'ts', 'ggforce')
pacman::p_load('fdClassify')
WD <- "C:/Users/pedro/OneDrive/@DOUTORADO/@@TU-Berlin/@Artigos/CAP 4/R"
setwd(WD)
rm(list = ls()) #clean environment
de.tha <- read.csv('FLX_DE-Tha_FLUXNET2015_SUBSET_DD_1996-2014_1-4.csv')
df <- de.tha
swc <- df[,c('TIMESTAMP','SWC_F_MDS_1')]
swc$TIMESTAMP <- ymd(swc$TIMESTAMP)
swc <- na_if(swc,-9999) #%>% .[complete.cases(.),]
colnames(swc) <- c('time', 'swc')
data.var <- data.frame(time = swc$time, value = swc$swc)
#define a column of years and reload start and end of series
data.var$year <- year(data.var[,1])
beg <- min(data.var$year) #year of the series beginning
end <- max(data.var$year)
year.var.list <- lapply(beg:end,f.year, data.var)
n.years <- length(year.var.list)
pentad.matrix<- NULL
pentad.series <- NULL
for (i in 1:n.years){
year.var <- year.var.list[[i]][1:2]
year.var <- tibble::tibble(time = as.POSIXct(year.var[,1]),
value = year.var[,2]) %>% as_tbl_time(time)
pentad.var <- collapse_by(year.var, period = '5 days')
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
#in leap years, the last pentad has 6 days
if (nrow(pentad.var) == 74){
pentad.var$var[73] <- (pentad.var$var[73]*5 + pentad.var$var[74])/6
}
pentad.matrix <- cbind(pentad.matrix,pentad.var$var)
#set dataframe with all years removing undesireble 74th pentad
pentad.series <- rbind(pentad.series, pentad.var[1:73,])
}
data.var <- data.frame(time = swc$time, var = swc$swc)
#define a column of years and reload start and end of series
data.var$year <- year(data.var[,1])
beg <- min(data.var$year) #year of the series beginning
end <- max(data.var$year)
year.var.list <- lapply(beg:end,f.year, data.var)
n.years <- length(year.var.list)
pentad.matrix<- NULL
pentad.series <- NULL
for (i in 1:n.years){
year.var <- year.var.list[[i]][1:2]
year.var <- tibble::tibble(time = as.POSIXct(year.var[,1]),
value = year.var[,2]) %>% as_tbl_time(time)
pentad.var <- collapse_by(year.var, period = '5 days')
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
#in leap years, the last pentad has 6 days
if (nrow(pentad.var) == 74){
pentad.var$var[73] <- (pentad.var$var[73]*5 + pentad.var$var[74])/6
}
pentad.matrix <- cbind(pentad.matrix,pentad.var$var)
#set dataframe with all years removing undesireble 74th pentad
pentad.series <- rbind(pentad.series, pentad.var[1:73,])
}
na_rm = F
for (i in 1:n.years){
year.var <- year.var.list[[i]][1:2]
year.var <- tibble::tibble(time = as.POSIXct(year.var[,1]),
value = year.var[,2]) %>% as_tbl_time(time)
pentad.var <- collapse_by(year.var, period = '5 days')
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
#in leap years, the last pentad has 6 days
if (nrow(pentad.var) == 74){
pentad.var$var[73] <- (pentad.var$var[73]*5 + pentad.var$var[74])/6
}
pentad.matrix <- cbind(pentad.matrix,pentad.var$var)
#set dataframe with all years removing undesireble 74th pentad
pentad.series <- rbind(pentad.series, pentad.var[1:73,])
}
i = 1
year.var <- year.var.list[[i]][1:2]
year.var
year.var <- tibble::tibble(time = as.POSIXct(year.var[,1]),
value = year.var[,2]) %>% as_tbl_time(time)
pentad.var <- collapse_by(year.var, period = '5 days')
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
pentad.var
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["var"]], na.rm = na_rm))
Sys.setenv(lang = 'en')
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
f = mean
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
for (i in 1:n.years){
year.var <- year.var.list[[i]][1:2]
year.var <- tibble::tibble(time = as.POSIXct(year.var[,1]),
value = year.var[,2]) %>% as_tbl_time(time)
pentad.var <- collapse_by(year.var, period = '5 days')
pentad.var <- pentad.var %>% group_by(time) %>%
summarise(var = f(.data[["value"]], na.rm = na_rm))
#in leap years, the last pentad has 6 days
if (nrow(pentad.var) == 74){
pentad.var$var[73] <- (pentad.var$var[73]*5 + pentad.var$var[74])/6
}
pentad.matrix <- cbind(pentad.matrix,pentad.var$var)
#set dataframe with all years removing undesireble 74th pentad
pentad.series <- rbind(pentad.series, pentad.var[1:73,])
}
pentad.series
library(fdClassify)
df <- read.csv('FLX_DE-Tha_FLUXNET2015_SUBSET_DD_1996-2014_1-4.csv')
dfd <- read.csv('FLX_DE-Tha_FLUXNET2015_SUBSET_DD_1996-2014_1-4.csv')
dfh <- read.csv('FLX_DE-Tha_FLUXNET2015_SUBSET_HH_1996-2014_1-4.csv')
WD <- "C:/Users/pedro/OneDrive/@DOUTORADO/@@TU-Berlin/@Artigos/CAP 4/R"
setwd(WD)
dfd <- read.csv('FLX_DE-Tha_FLUXNET2015_SUBSET_DD_1996-2014_1-4.csv')
dfh <- read.csv('FLX_DE-Tha_FLUXNET2015_SUBSET_HH_1996-2014_1-4.csv')
de_tha_d <- dfd[,c('TIMESTAMP','P_F','TA_F','WS_F', 'VPD_F', 'H_F_MDS', 'LE_F_MDS', 'SWC_F_MDS_1')]
colnames(de_tha_d) <- c('time', 'precipitation', 'temperature','wind_speed','pressure_atm',
'vapor_p_def', 'sensible_heat', 'latent_heat','soil_water'))
de_tha_d <- dfd[,c('TIMESTAMP','P_F','TA_F','WS_F', 'PA_F', 'VPD_F', 'H_F_MDS', 'LE_F_MDS', 'SWC_F_MDS_1')]
colnames(de_tha_d) <- c('time', 'precipitation', 'temperature','wind_speed','pressure_atm',
'vapor_p_def', 'sensible_heat', 'latent_heat','soil_water'))
Sys.setenv(lang ='en')
de_tha_d <- dfd[,c('TIMESTAMP','P_F','TA_F','WS_F', 'PA_F', 'VPD_F', 'H_F_MDS', 'LE_F_MDS', 'SWC_F_MDS_1')]
colnames(de_tha_d) <- c('time', 'precipitation', 'temperature','wind_speed','pressure_atm',
'vapor_p_def', 'sensible_heat', 'latent_heat','soil_water'))
colnames(de_tha_d) <- c('time', 'precipitation', 'temperature','wind_speed','pressure_atm',
'vapor_p_def', 'sensible_heat', 'latent_heat','soil_water')
de_tha_d
de_tha_d[de_tha_d==-9999] <- NA
de_tha_d
dfh
de_tha_h <- dfh[,c('TIMESTAMP','P_F','TA_F','WS_F', 'PA_F', 'RH', 'H_F_MDS', 'LE_F_MDS', 'SWC_F_MDS_1')]
de_tha_h <- dfh[,c('TIMESTAMP_START','P_F','TA_F','WS_F', 'PA_F', 'RH', 'H_F_MDS', 'LE_F_MDS', 'SWC_F_MDS_1')]
colnames(de_tha_h) <- c('time', 'precipitation', 'temperature','wind_speed','pressure_atm',
'r_umidity', 'sensible_heat', 'latent_heat','soil_water')
de_tha_h[de_tha_h==-9999] <- NA
de_tha_h
usethis::use_data(de_tha_d)
WD <- "C:/Users/pedro/OneDrive/@DOUTORADO/@@TU-Berlin/@Artigos/CAP 4/package/fdClassify"
setwd(WD)
usethis::use_data(de_tha_d)
write.csv(de_tha_h, 'de_tha_h.csv')
write.csv(de_tha_d, 'de_tha_d.csv')
load("C:/Users/pedro/OneDrive/@DOUTORADO/@@TU-Berlin/@Artigos/CAP 4/package/fdClassify/.RData")
getwd()
de_tha_h <- read.csv('de_tha_h.csv')
de_tha_h
de_tha_d <- read.csv('de_tha_d.csv')
usethis::use_data(de_tha_d)
usethis::use_data(de_tha_f)
usethis::use_data(de_tha_h)
load("C:/Users/pedro/OneDrive/@DOUTORADO/@@TU-Berlin/@Artigos/CAP 4/package/fdClassify/data/de_tha_d.rda")
de_tha_h
colmanes(de_tha_h)
colnames(de_tha_h)
colnames(de_tha_d)
library(fdClassify)
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
Sys.setenv(lang = 'en')
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
detach("package:fdClassify", unload = TRUE)
library(fdClassify)
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
a <- date
a
a <- "2020-01-01"
a <- as.Date(a)
a
year(a)
library(lubridate)
year(a)
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
detach("package:lubridate", unload = TRUE)
detach("package:fdClassify", unload = TRUE)
library(fdClassify)
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
a <- "2020-01-01"
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
library(lubridate)
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
vtime = de_tha_d$time
vswc = de_tha_d$soil_water
crit = c(40,20,30))
crit = c(40,20,30)
crit1 = crit[1] #upper limit
crit2 = crit[2] #lower limit
crit3 = crit[3] # recuperation limit
swc <- data.frame(time = vtime, swc = vswc)
#get pentads
pentad.swc.list <- f.pentad(vtime = swc$time, vvalue = swc$swc,
na_rm = F, f = mean)
series.swc <- pentad.swc.list$pentad_timestamp
pentad.swc <- pentad.swc.list$pentad_matrix
# get percentiles
percentile.swc <- t(apply(pentad.swc,1, f.percentile))
ts.percentile.swc <- ts(c(percentile.swc), frequency = 73, start =  min(year(series.swc$time)))
#get column of percentiles
percentile.series <- c(percentile.swc)
#remove NA from the beggining of the series. Necessary for p.min calculation.
firstNonNA <- min(which(!is.na(percentile.series)))
percentile.series <- percentile.series[firstNonNA:length(percentile.series)]
#get accumulated difference from 1 to 4 pentads.
a1 <- unlist(lapply(1:length(percentile.series),
function(i) percentile.series[i] - percentile.series[i-1])) %>%
c(rep(NA,1),.)
a2 <- unlist(lapply(2:length(percentile.series),
function(i) percentile.series[i] - percentile.series[i-2])) %>%
c(rep(NA,2),.)
library(dplyr)
vtime = de_tha_d$time
vswc = de_tha_d$soil_water
crit = c(40,20,30)
crit1 = crit[1] #upper limit
crit2 = crit[2] #lower limit
crit3 = crit[3] # recuperation limit
swc <- data.frame(time = vtime, swc = vswc)
#get pentads
pentad.swc.list <- f.pentad(vtime = swc$time, vvalue = swc$swc,
na_rm = F, f = mean)
series.swc <- pentad.swc.list$pentad_timestamp
pentad.swc <- pentad.swc.list$pentad_matrix
# get percentiles
percentile.swc <- t(apply(pentad.swc,1, f.percentile))
ts.percentile.swc <- ts(c(percentile.swc), frequency = 73, start =  min(year(series.swc$time)))
# get percentiles
percentile.swc <- t(apply(pentad.swc,1, f.percentile))
swc <- data.frame(time = vtime, swc = vswc)
#get pentads
pentad.swc.list <- f.pentad(vtime = swc$time, vvalue = swc$swc,
na_rm = F, f = mean)
vtime
de_tha_d.csv
de_tha_d <- read.csv('de_tha_d.csv')
de_tha_d
de_tha_d <- de_tha_d[,-c(1)]
de_tha_d
de_tha_d$time <- ymd(de_tha_d$time)
de_tha_d
de_tha_h <- read.csv('de_tha_h.csv')
de_tha_h <- de_tha_h[,-c(1)]
de_tha_h$time <- ymd_hm(de_tha_h$time)
de_tha_h
usethis::use_data(de_tha_d)
usethis::use_data(de_tha_d,overwrite = TRUE)
usethis::use_data(de_tha_h,overwrite = TRUE)
pacman::p_load('ncdf4','ncdf4.helpers','PCICt','ggplot2','tidyr','dplyr','readr'
,'raster','tibbletime','lubridate','RColorBrewer','stringr','knitr'
,'tinytex','data.table','runner','reshape2', 'tidyquant','SPEI'
, 'ggforce','tidyverse','tictoc')
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
fd_FordLabosier
fd_Mo <- Mo2016(vtime = de_tha_d$time, vprecipitation = de_tha_d$precipitation,
vtemperature = de_tha_d$temperature, vsoil_water = de_tha_d$soil_water,
vlatent_heat = de_tha_d$latent_heat)
detach("package:fdClassify", unload = TRUE)
library(fdClassify)
fd_Mo <- Mo2016(vtime = de_tha_d$time, vprecipitation = de_tha_d$precipitation,
vtemperature = de_tha_d$temperature, vsoil_water = de_tha_d$soil_water,
vlatent_heat = de_tha_d$latent_heat)
library(fdClassify)
fd_Mo <- Mo2016(vtime = de_tha_d$time, vprecipitation = de_tha_d$precipitation,
vtemperature = de_tha_d$temperature, vsoil_water = de_tha_d$soil_water,
vlatent_heat = de_tha_d$latent_heat)
library(fdClassify)
de_tha_d
library(fdClassify)
library(fdClassify)
library(fdClassify)
remove.packages("fdClassify", lib="~/R/win-library/4.0")
install.packages('fdClassify')
install.packages("fdClassify")
library(fdClassify)
if(!require('pacman'))install.packages('pacman')
pacman::p_load('ncdf4','ncdf4.helpers','PCICt','ggplot2','tidyr','dplyr','readr'
,'raster','tibbletime','lubridate','RColorBrewer','stringr','knitr'
,'tinytex','data.table','runner','reshape2', 'tidyquant','SPEI'
, 'ggforce','tidyverse','tictoc')
Sys.setenv(lang = 'en')
fd_FordLabosier <- FordLabosier2017(vtime = de_tha_d$time,
vswc = de_tha_d$soil_water,
crit = c(40,20,30))
fd_Mo <- Mo2016(vtime = de_tha_d$time, vprecipitation = de_tha_d$precipitation,
vtemperature = de_tha_d$temperature, vsoil_water = de_tha_d$soil_water,
vlatent_heat = de_tha_d$latent_heat)
Mo2016
de_tha_d
de_tha_d$time
vtime = de_tha_d$time
vprecipitation = de_tha_d$precipitation
vtemperature = de_tha_d$temperature
vsoil_water = de_tha_d$soil_water
vlatent_heat = de_tha_d$latent_heat
flux_data = T
if (flux_data){
vevap <- actual_evap_day(vtime = vtime, vlatent_heat = vlatent_heat,
vtemperature = vtemperature)
#remove negative values (condensation)
vevap[vevap < 0] <- 0
} else {vevap[vevap < 0] <- 0}
#get dataa into list
list_classification <- list(precipitation = data.frame(time = vtime,
value = vprecipitation),
temperature = data.frame(time = vtime,
value = vtemperature),
soil_water = data.frame(time = vtime,
value = vsoil_water),
actual_evap = data.frame(time = vtime,
value = vevap))
list_classification
vevap
#get dataa into list
list_classification <- list(precipitation = data.frame(time = vtime,
value = vprecipitation),
temperature = data.frame(time = vtime,
value = vtemperature),
soil_water = data.frame(time = vtime,
value = vsoil_water),
actual_evap = data.frame(time = vtime,
value = vevap$eta))
list_classification
list_pentad <- NULL
var_names <- c('precipitation', 'temperature','soil_water', 'actual_evap')
for (i in var_names){
list_pentad[[i]] <- f.pentad(vtime = list_classification[[i]]$time,
vvalue = list_classification[[i]]$value)
}
list_pentad
detach("package:fdClassify", unload = TRUE)
library(fdClassify)
fd_Mo <- Mo2016
Mo2016
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
aux_year <- lubridate::year
library(fdClassify)
esr_pentad <- f.pentad(vtime = data_et$time, vvalue = data_et$esr, na_rm = T)
library(fdClassify)
library(fdClassify)
