i = 1
swc_aux <- swc_df$percentile[(3+index_df$beg[i]):index_df$end[i]]
swc_aux
swc_aux <- swc_df$percentile[(index_df$beg[i]):index_df$end[i]]
swc_aux
min(which(swc_aux<=20))
id_onset <- min(which(swc_aux<=20))
index_df$onset[i] <- index_df$beg[i] + id_onset - 1
index_df$onset[i]
index_df$beg[i]
threshold
swc_df
index_df <- index_df[complete.cases(index_df),] #this are events that reach 20p and respect the intensification rule
index_df$onset <- 0
for (i in 1:nrow(index_df)){
# print(i)
i = 1
swc_aux <- swc_df$percentile[(index_df$beg[i]):index_df$end[i]]
id_onset <- min(which(swc_aux<=threshold))
index_df$onset[i] <- index_df$beg[i] + id_onset - 1
# Adjust event duration for cases when SW is over 20 percentile (second criterion for end of FD)
if (max(swc_aux[id_onset:length(swc_aux)])>= threshold){
id_end <- min(which(swc_aux[id_onset:length(swc_aux)]>= threshold))
index_df$end[i] <- index_df$onset[i] +id_end - 1
index_df$length[i] <- index_df$end[i] - index_df$beg[i] + 1
}
index_df$index[i] <- index_df$end[i]
}
# join evetns to series
swc_df$index <- 1:nrow(swc_df)
swc_df <- dplyr::left_join(swc_df,index_df, by= 'index')
swc_df
swc_df[is.na(swc_df)] <- 0
swc_df
#fix duration
for (i in 1:nrow(swc_df)){
if (swc_df$length[i]>0){
dur <- swc_df$length[i]
swc_df$is.fd[(i-dur + 1):i] <- 1
}
}
swc_df$is.fd <- 0
#fix duration
for (i in 1:nrow(swc_df)){
if (swc_df$length[i]>0){
dur <- swc_df$length[i]
swc_df$is.fd[(i-dur + 1):i] <- 1
}
}
swc_df
library(fdClassify)
library(fdClassify)
library(fdClassify)
detach("package:fdClassify", unload = TRUE)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
df_d <- de_tha_d
score = 0.6
d_score = 0.2
thresholds = c(1, 0, 0, 0, -2, 50, 10, 30)
ET0 <- penman_day(vtime = df_d$time, vwind = df_d$wind_speed, vtemp = df_d$temperature,
vvpd = df_d$vapor_p_def, vheatflux = (df_d$sensible_heat + df_d$latent_heat))[,2]
ETa <- actual_evap_day(vtime = df_d$time,vlatent_heat =df_d$latent_heat, vtemperature = df_d$temperature)[,2]
vtime = df_d$time
vtemp = df_d$temperature
vprec = df_d$precipitation
vet0 = ET0
veta = ETa
#build basic data frame
df_day <- data.frame(time = vtime, temperature = vtemp, precipitation = vprec,
et0 = vet0, eta = veta)
#accumulate data into weeks
list_week_matrix <- list(NA) #list of matrixes for each variable
df_week <- f.week(df_day[,c(1,2)],na_rm = F, f = mean, kind = 'standard')[[1]][,1]
for (i in 2:ncol(df_day)){
list_week_matrix[[i-1]] <- f.week(df_day[,c(1,i)],na_rm = F, f = mean, kind = 'standard')[[2]]
df_week[,i] <- f.week(df_day[,c(1,i)],na_rm = F, f = mean, kind = 'standard')[[1]][,2]
}
df_week[,3:5] <- df_week[,3:5] * 7 #adjust to display sum instead of mean
colnames(df_week) <- colnames(df_day) # rename columns
names(list_week_matrix) <- colnames(df_day[,2:5])
#anomaly of weekly accumulation
df_week_anomalies <- df_week
list_week_anomalies <- list_week_matrix
for (i in 2:ncol(df_week)){
list_week_anomalies[[i-1]] <- t(apply(as.data.frame(list_week_matrix[[i-1]]),1, f.anomaly))
df_week_anomalies[,i] <- c(list_week_anomalies[[i-1]])
}
#join anomalies
df_week$temp_anomaly <- df_week_anomalies$temperature
df_week$prec_anomaly <- df_week_anomalies$precipitation
df_week$et0_anomaly <- df_week_anomalies$et0
df_week$eta_anomaly <- df_week_anomalies$eta
df_week$time <- as.Date(df_week$time) #cast times from dttm to Date
df_week$deficit <- df_week$precipitation - df_week$et0 #calculate hidrological deficit
spei_list <- f.spei(df_week$time, df_week$deficit, n = 4) #get accumulated deficit over four weeks
df_week$spei <- spei_list[[1]]$spei
df_week$deficit <- NULL #remove deficit column
#EDDI
df_week$eddi <- c(eddi_percentile(vtime = df_week$time,
vet0 = df_week$et0, dist = 'tukey')
)
#SESR
sesr_input_clean <- Christian_clean_data_week(vtime = df_day$time,
vET0 = df_day$et0,
vETa = df_day$eta,
threshold = thresholds[1])
df_week$sesr <- sesr_input_clean[[1]]$var
n_weeks <- 4
# accumulations and differences over intensification period
df_week$temp_anomaly_ac <- runner::runner(df_week$temp_anomaly, k = 4, f = sum)
df_week$prec_anomaly_ac <- runner::runner(df_week$prec_anomaly, k = 4, f = sum)
df_week$et0_anomaly_ac <- runner::runner(df_week$et0_anomaly, k = 4, f = sum)
df_week$eta_anomaly_ac <- runner::runner(df_week$eta_anomaly, k = 4, f = sum)
df_week$spei_dif <- c(rep(NA, n_weeks),diff(df_week$spei, lag = n_weeks))
df_week$eddi_dif1 <- c(rep(NA, n_weeks-2),diff(df_week$eddi, lag = n_weeks-2))
df_week$sesr_dif <- c(rep(NA, n_weeks),diff(df_week$sesr, lag = n_weeks))
#delta.SESR percentiles
df_week$sesr_dif_perc <- c(t(apply(matrix(df_week$sesr_dif, nrow = 52, byrow = F),1, f.percentile)))
criteria_names <- c('time', 'temp_anomaly', 'prec_anomaly', 'et0_anomaly', 'eta_anomaly',
'spei', 'sesr', 'eddi',
'prec_anomaly_ac','et0_anomaly_ac','temp_anomaly_ac',
'spei_dif', 'eddi_dif1', 'sesr', 'sesr_dif_perc', 'sesr_dif')
df_criteria <- df_week[colnames(df_week) %in% criteria_names]
df_criteria$temp_anomaly <- (df_criteria$temp_anomaly > thresholds[2])*1
df_criteria$prec_anomaly <- (df_criteria$prec_anomaly < -thresholds[2])*1
df_criteria$et0_anomaly <- (df_criteria$et0_anomaly > thresholds[2])*1
df_criteria$eta_anomaly <- (df_criteria$eta_anomaly > thresholds[2])*1
df_criteria$spei <- (df_criteria$spei < thresholds[3])*1
df_criteria$eddi <- (df_criteria$eddi > 100*pnorm(thresholds[2],0,1))*1 #
df_criteria$sesr <- (df_criteria$sesr < thresholds[2])*1 #
df_criteria$temp_anomaly_ac <- (df_criteria$temp_anomaly_ac > thresholds[4])*1
df_criteria$prec_anomaly_ac <- (df_criteria$prec_anomaly_ac < thresholds[4])*1
df_criteria$et0_anomaly_ac <- (df_criteria$et0_anomaly_ac > thresholds[4])*1
df_criteria$spei_dif <- (df_criteria$spei_dif < thresholds[5])*1
df_criteria$sesr_dif <- (df_criteria$sesr_dif < thresholds[5])*1 #
df_criteria$eddi_dif1 <- (df_criteria$eddi_dif1 < thresholds[6])*1
df_criteria$sesr_dif_perc <- (df_criteria$sesr_dif_perc < thresholds[8])*1 #
n_criteria <- ncol(df_criteria)-1
# hist(df_criteria$score)
#     #get scores and percentiles
df_criteria$score <- rowSums(df_criteria[,2:ncol(df_criteria)], na.rm = T)/n_criteria
df_criteria$score_percentile_global <- f.percentile(df_criteria$score)
df_criteria$score_percentile_period <- c(t(apply(matrix(df_criteria$score,
nrow = 52, byrow = F),1,
f.percentile)))
# classify as event
df_events <- df_criteria[,c(1,16,17,18)]
# df_events$is.fd <- (df_events$score_percentile_global > score)*1
diffs <- data.frame(time = df_events$time)
diffs$d1 <- c(0,diff(df_events$score, lag = 1))
diffs$d2 <- c(0,0,diff(df_events$score, lag = 2))
diffs$d3 <- c(0,0,0,diff(df_events$score, lag = 3))
df_events$d_max <- apply(diffs[,2:4], 1, max) #get intensification
df_events$p_max <- apply(diffs[,2:4], 1, which.max) # get intensification duration
df_events$is.fd <- (df_events$score > score)*1
# remove too short events (single week)
for (i in 2:(nrow(df_events) - 1)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[i] <- max(df_events$is.fd[i-1], df_events$is.fd[i+1])
}
}
diffs
df_events
View(df_events)
df_events$is.fd <- (df_events$score > score)*(df_events$p_max > d_score)
View(df_events)
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1){
score_aux <- df_events$score[i]
while(score_aux > score){
i <- i+1
df_events$is.fd[i] <-1
score_aux <- df_events$score[i]
}
}
i <- i+1
}
score
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
# remove too short events (single week)
for (i in 2:(nrow(df_events) - 1)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[i] <- max(df_events$is.fd[i-1], df_events$is.fd[i+1])
}
}
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1){
score_aux <- df_events$score[i]
while(score_aux > score){
i <- i+1
df_events$is.fd[i] <-1
score_aux <- df_events$score[i]
}
}
i <- i+1
}
df_events$p_max <- apply(diffs[,2:4], 1, which.max) # get intensification duration
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1){
i <- i+1
score_aux <- df_events$score[i]
while(score_aux > score){
df_events$is.fd[i] <-1
score_aux <- df_events$score[i]
}
}
i <- i+1
}
t
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1){
i <- i+1
score_aux <- df_events$score[i]
if (score_aux > score){
df_events$is.fd[i] <-1
}
}
i <- i+1
}
View(df_events)
View(df_events)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1 & df_events$score[i+1] > score){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1 & df_events$score[i+1] > score){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1 & (df_events$score[i+1] > score | df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1 & (df_events$score[i+1] > score || df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1 & df_events$score[i+1] > score) || (df_events$is.fd[i] == 1 & df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if (df_events$is.fd[i] == 1 & df_events$score[i+1] > score) || (df_events$is.fd[i] == 1 & df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
i = 1
while (i < nrow(df_events)){
if ((df_events$is.fd[i] == 1 & df_events$score[i+1] > score) || (df_events$is.fd[i] == 1 & df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
(df_events$is.fd[i] == 1 & df_events$score[i+1] > score)
=
(df_events$is.fd[i] == 1 & df_events$score[i+1] > score)
(df_events$is.fd[i] == 1 & df_events$score[i+2] > score)
i = 1
while (i < (nrow(df_events)-1)){
if ((df_events$is.fd[i] == 1 & df_events$score[i+1] > score) | (df_events$is.fd[i] == 1 & df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
# remove too short events (single week)
for (i in 2:(nrow(df_events) - 1)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[i] <- max(df_events$is.fd[i-1], df_events$is.fd[i+1])
}
}
# remove too short events (single week)
for (i in 2:(nrow(df_events) - 1)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[i] <- max(df_events$is.fd[i-1], df_events$is.fd[i+1])
}
}
df_events$d_max <- apply(diffs[,2:4], 1, max) #get intensification
df_events$p_max <- apply(diffs[,2:4], 1, which.max) # get intensification duration
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
#get correct length of the event (allow one week of recuperation (like christian))
i = 1
while (i < (nrow(df_events)-1)){
if ((df_events$is.fd[i] == 1 & df_events$score[i+1] > score) | (df_events$is.fd[i] == 1 & df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
df_events$is.fd[lubridate::month(df_events$time) %in% c(1,2,11,12)] <- 0
# removes winter events
df_events$is.fd[lubridate::month(df_events$time) %in% c(1,2,11,12)] <- 0
# remove too short events (single week)
for (i in 2:(nrow(df_events) - 1)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[i] <- max(df_events$is.fd[i-1], df_events$is.fd[i+1])
}
}
df_events$is.fd <- (df_events$score > score)*(df_events$d_max > d_score)
# removes winter events
df_events$is.fd[lubridate::month(df_events$time) %in% c(1,2,11,12)] <- 0
# remove too short events (single week)
for (i in 2:(nrow(df_events) - 1)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[i] <- max(df_events$is.fd[i-1], df_events$is.fd[i+1])
}
}
#get correct length of the event (allow one week of recuperation (like christian))
i = 1
while (i < (nrow(df_events)-1)){
if ((df_events$is.fd[i] == 1 & df_events$score[i+1] > score) | (df_events$is.fd[i] == 1 & df_events$score[i+2] > score)){
df_events$is.fd[i+1] <-1
}
i <- i+1
}
# remove too short events (single week)
for (i in 2:(nrow(df_events) - 1)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[i] <- max(df_events$is.fd[i-1], df_events$is.fd[i+1])
}
}
# add intensification period into event length
for (i in 1:nrow(df_events)){
if (df_events$is.fd[i] == 1){
df_events$is.fd[(i-df_events$p_max[i]):(i-1)] <- 1
}
}
library(fdClassify)
library(fdClassify)
library(fdClassify)
library(fdClassify)
de_tha_d
de_tha_d
library(fdClassify)
de_tha_d
ETa <- actual_evap_day(vtime = de_tha_d$time,vlatent_heat =de_tha_d$latent_heat, vtemperature = de_tha_d$temperature)[,2]
ETa
all_fd <- process_all(de_tha_d,include_variables = T, data = 'station')[1]
confusion_matrix <- conf_matrix(all_fd[,2:10], all_fd$`Osman et al.`)
conf_matrix
confusionMatrix
library(caret)
confusion_matrix <- conf_matrix(all_fd[,2:10], all_fd$`Osman et al.`)
conf_matrix(all_fd, all_fd$`Osman et al.`)
all_fd
df
#' FD-Viz app
#'
#' @return melted data frame to draw plot.
#' @export
#'
#' @examples
#' all_fd <- process_all(de_tha_d,include_variables = T, data = 'station')[1]
#'
#' confusion_matrix <- conf_matrix(all_fd, all_fd$`Osman et al.`)
#'
conf_matrix <- function(df, ref){
# df <- stats
# ref <- stats$`Mod. Ford and Labosier`
metric1 <- NULL
for (i in 2:10){
# i = 3
conf_mat <- confusionMatrix(data = factor(df[,i]), reference = factor(ref))
overall <- data.frame(value = conf_mat$overall)
byclass <- data.frame(value = conf_mat$byClass)
conf_mat <- rbind(overall, byclass)
# conf_mat <- overall
if (i == 3){
metric1 <- conf_mat
} else {
metric1 <- cbind(metric1,conf_mat)
}
}
colnames(metric1) <- c("Mo and Lettenmeier","Ford and Labosier", "Pendergrass et al.",
"Noguera et al." , "Christian et al.", "Osman et al.",
'Alencar et al.', "Mod. Ford and Labosier", "Multi-criteria")
metric1$metric <- row.names(metric1)
metric1 <- metric1[c(1,2,8,9,12,14),] %>%
gather(key = 'model', value = 'value', 1:9) %>%
.[.$model != "Mod. Ford and Labosier",]
return(metric1)
}
conf_matrix(all_fd, all_fd$`Osman et al.`)
all_fd
metric1 <- NULL
df <- all_fd
ref <- all_fd$`Osman et al.`
df
metric1 <- NULL
for (i in 2:10){
# i = 3
conf_mat <- confusionMatrix(data = factor(df[,i]), reference = factor(ref))
overall <- data.frame(value = conf_mat$overall)
byclass <- data.frame(value = conf_mat$byClass)
conf_mat <- rbind(overall, byclass)
# conf_mat <- overall
if (i == 3){
metric1 <- conf_mat
} else {
metric1 <- cbind(metric1,conf_mat)
}
}
i = 2
metric1 <- NULL
for (i in 2:10){
# i = 2
conf_mat <- confusionMatrix(data = factor(df[,i]), reference = factor(ref))
overall <- data.frame(value = conf_mat$overall)
byclass <- data.frame(value = conf_mat$byClass)
conf_mat <- rbind(overall, byclass)
# conf_mat <- overall
if (i == 2){
metric1 <- conf_mat
} else {
metric1 <- cbind(metric1,conf_mat)
}
}
i = 2
conf_mat <- confusionMatrix(data = factor(df[,i]), reference = factor(ref))
factor(ref)
ref
ref <- all_fd$`Osman et al.`
ref
all_fd
all_fd$`Osman et al.`
all_fd <- process_all(de_tha_d,include_variables = T, data = 'station')$Series
all_fd
df <- all_fd
ref <- all_fd$`Osman et al.`
metric1 <- NULL
for (i in 2:10){
# i = 2
conf_mat <- confusionMatrix(data = factor(df[,i]), reference = factor(ref))
overall <- data.frame(value = conf_mat$overall)
byclass <- data.frame(value = conf_mat$byClass)
conf_mat <- rbind(overall, byclass)
# conf_mat <- overall
if (i == 2){
metric1 <- conf_mat
} else {
metric1 <- cbind(metric1,conf_mat)
}
}
metric1
colnames(metric1) <- c("Mo and Lettenmeier","Ford and Labosier", "Pendergrass et al.",
"Noguera et al." , "Christian et al.", "Osman et al.",
'Alencar et al.', "Mod. Ford and Labosier", "Multi-criteria")
metric1$metric <- row.names(metric1)
eddi_values <- penman_day(vtime = de_tha_d$time, vwind = de_tha_d$wind_speed,
vvpd = de_tha_d$vapor_p_def, vtemp = de_tha_d$temperature,
vheatflux = (de_tha_d$sensible_heat + de_tha_d$latent_heat))[,2] %>%
eddi()
library(dplyr)
eddi_values <- penman_day(vtime = de_tha_d$time, vwind = de_tha_d$wind_speed,
vvpd = de_tha_d$vapor_p_def, vtemp = de_tha_d$temperature,
vheatflux = (de_tha_d$sensible_heat + de_tha_d$latent_heat))[,2] %>%
eddi()
eddi_values
library(fdClassify)
source('~/OneDrive/@DOUTORADO/@@TU-Berlin/@Artigos/CAP 4/package/fdClassify/R/fweek.R')
library('dplyr')
library('lubridate')
set.seed(808)
date <- sample(seq(as.Date('2015/01/01'), as.Date('2020/12/31'), by='day'), 100)
vals <- sample(seq(1, 375), 100)
df <- data.frame(date, vals)
df <- df[order(as.Date(df$date, format='%Y-%m-%d')),]
df
df_agg <- df %>% group_by(week = week(date)) %>% summarise(value = na.omit(mean(vals)))
df_agg
df
df_agg
tail(df_agg)
df %>%
mutate(year = lubridate::year(date)) %>%
group_by(year, week = week(date)) %>%
summarise(value = na.omit(mean(vals)))
